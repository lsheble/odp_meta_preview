[
  {
    "objectID": "exemplar/inspect_df_trial_fire_inspections.html",
    "href": "exemplar/inspect_df_trial_fire_inspections.html",
    "title": "Fire inspections data set overview",
    "section": "",
    "text": "Code\nlibrary(readr)\nlibrary(inspectdf)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(dplyr)\nlibrary(ggplot2)\n#library(ggsankey)\n#library(lubridate)\nFire Inspections data was downloaded in csv format from the ODP on Oct 10, 2020 to obtain a snapshot of published data after completion of the entire data processing pipeline."
  },
  {
    "objectID": "exemplar/inspect_df_trial_fire_inspections.html#overview",
    "href": "exemplar/inspect_df_trial_fire_inspections.html#overview",
    "title": "Fire Inspections Overview",
    "section": "Overview",
    "text": "Overview\nThe imported data set includes 16 variables and 5636 annual inspection records. Nine variables originate in the ingested data, and seven (X, Y, InspWithinLastYear, address_id, lon, lat, ObjectId) from data enrichment and processing activities.\n\n\nCode\ninspections\n\n\n\n\n  \n\n\n\nWhen imported, variables in the data set were assigned data types based on constituent data. Though fundamentally a logical variable, ‘InspWithinLastYear’ was treated as a factor to retain display of the labels ‘Yes’ and ‘No’.\n\n\nCode\ninspect_types(inspections) %>% show_plot()\n\n\n\n\n\n\nNull value prevalence\n\n\nCode\ninspect_na(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\n# Remove 'ANNUAL ' from InspectionType_Full text strings for chart and plot\ntmp_inspections <- inspections\ntmp_inspections$InspectionType_Full <- str_sub(tmp_inspections$InspectionType_Full, 8, -1)\ntmp_inspections %>% count(InspectionType_Full, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(tmp_inspections, aes(x = fct_infreq(InspectionType_Full))) + \n  geom_bar() + labs(x=\"Annual Inspection Type\", y=\"Count\") + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetype, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(propusetypedescription))) + \n  geom_bar() + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetypedescription, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% count(InspWithinLastYear, sort=TRUE)\n\n\n\n\n  \n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(InspWithinLastYear))) + \n  geom_bar()\n\n\n\n\n\n\n\nCode\n# Need to bin by month or year - this is unbinned\n# inspections %>% select(LatestInspDate)\n# ggplot(inspections, aes(x=LatestInspDate)) + stat_count(geom='point')\n\n\n\n\nCode\ninspect_imb(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\ninspect_cat(inspections)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% distinct(propusetype, propusetypedescription)  #%>% select(PropUseType, PropUseTypeDescription)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% arrange(propusetype) %>% distinct(propusetypedescription) %>% arrange(.by_group = TRUE)"
  },
  {
    "objectID": "exemplar/inspect_df_trial_fire_inspections.html#preparaton-of-data",
    "href": "exemplar/inspect_df_trial_fire_inspections.html#preparaton-of-data",
    "title": "Fire Inspections Overview",
    "section": "Preparaton of data",
    "text": "Preparaton of data\n\nConvert categorical data columns to data type factor\n\n\nCode\n# # inspection, prop use types to factors\n# inspections$InspectionType_Full <- as_factor(inspections$InspectionType_Full)\n# inspections$PropUseType <- as_factor(inspections$PropUseType)\n# inspections$PropUseTypeDescription <- as_factor(inspections$PropUseTypeDescription)\n# inspections$InspWithinLastYear <- as_factor(inspections$InspWithinLastYear)\n\n\nData types\n\n\nCode\ninspect_types(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\n# Remove 'ANNUAL ' from InspectionType_Full text strings for chart and plot\ntmp_inspections <- inspections\ntmp_inspections$InspectionType_Full <- str_sub(tmp_inspections$InspectionType_Full, 8, -1)\ntmp_inspections %>% count(InspectionType_Full, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(tmp_inspections, aes(x = fct_infreq(InspectionType_Full))) + \n  geom_bar() + labs(x=\"Annual Inspection Type\", y=\"Count\") + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetype, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(propusetypedescription))) + \n  geom_bar() + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetypedescription, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% count(InspWithinLastYear, sort=TRUE)\n\n\n\n\n  \n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(InspWithinLastYear))) + \n  geom_bar()\n\n\n\n\n\n\n\nCode\n# Need to bin by month or year - this is unbinned\n# inspections %>% select(LatestInspDate)\n# ggplot(inspections, aes(x=LatestInspDate)) + stat_count(geom='point')\n\n\n\n\nCode\ninspect_imb(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\ninspect_cat(inspections)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% distinct(propusetype, propusetypedescription)  #%>% select(PropUseType, PropUseTypeDescription)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% arrange(propusetype) %>% distinct(propusetypedescription) %>% arrange(.by_group = TRUE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "odp_meta_preview",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "data_dot_gov.html",
    "href": "data_dot_gov.html",
    "title": "Preparing ODP data for discovery through Data.gov",
    "section": "",
    "text": "The Data.gov website serves as a centralized data catalog the public can use to discover public data. The primary focus is federal data though state and local governments and NGOs are invited to have catalog, data set, and data distribution metadata included in the catalog. To do so, organizations can sign up to have metadata harvested through a DCAT-US 1.1 compliant API. DCAT-US schema version 1.1 metadata requirements are published on resources.data.gov. The json-ld schema for DCAT 1.1 is available at the URL https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld.\nThrough ArcGIS Online (AGO), [the ODP has an JSON endpoint]((https://data.detroitmi.gov//api/feed/dcat-us/1.1.json) that meets Data.gov format requirements. AGO therefore provides an approach to having ODP data included in the Data.gov catalog fairly easily (see figure). Additions, updates, and deletions to the Data.gov catalog occur through the harvest source rather than within Data.gov directly. Data.gov synchronizes changes daily through a harvest job."
  },
  {
    "objectID": "data_dot_gov.html#requirements-for-adding-non-federal-government-data-to-data.gov",
    "href": "data_dot_gov.html#requirements-for-adding-non-federal-government-data-to-data.gov",
    "title": "AGO-DCAT-Data.gov",
    "section": "Requirements for adding non-federal government data to Data.gov",
    "text": "Requirements for adding non-federal government data to Data.gov\nGithub issue #1168 provides an overview of steps required to have Detroit’s ODP metadata harvested by Data.gov.\n\n\n\n\nflowchart LR\n  A[(AGO <br> geodatabase)] -. exposes DCATA-US v1.1 <br> metadata .-> B[[1 Catalog record <br> containing <br> many Dataset records]] -. harvested by <br> Data.gov .-> C[(Data.gov <br> catalog)]\n\n\n\n\n\n\n\n\nSecond diagram\n\n\n\n\nflowchart TB\n  subgraph Catalog_Record\n    direction LR\n    d1[[Dataset <br> record 1]]\n    d2[[Dataset <br> record 2]]\n    d3[[Dataset <br> record n]]\n  end  \n  A[(AGO <br> geodatabase)] -. exposes DCATA-US v1.1 <br> metadata .-> Catalog_Record -. harvested by <br> Data.gov .-> C[(Data.gov <br> catalog)]\n\n\n\n\n\n\n\n\nThe article “How to get your Open Data on Data.gov” provides instructions for having Open Data harvested by Data.gov and includes details specific to non-federal governments.\nIn brief, requirements for adding local government data that would need to be completed are:\n\nA data.json endpoint that can be harvested by the Data.gov catalog with metadata that meets minimum criteria required of non-federal government entities. DCAT-US schema version 1.1 metadata requirements are published on resources.data.gov. The jsonld schema URL for DCAT 1.1 is https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld.\n\nTo do: Develop a terms of use / data policy for data sets shared through the Detroit Open Data Portal. To be in compliance with data.gov requirements, this policy should be accessible via a stable URL.\nFor review: Identify a single point of contact to which/whom data.gov staff can refer questions about Detroit data sets. This point of contact should be able to triage questions about Detroit data.\nTo do: Ensure every data set meets the minimum metadata requirements. To help with this, metadata can be validated using a .json catalog endpoint or by file upload at https://labs.data.gov/dashboard/validate . Preliminary results from an initial validation of our catalog are being analyzed.\nTo do: Review metadata and text formatting of metadata entries as shared through the DCAT json endpoint available from AGO. Special attention should be paid to metadata added with html formatting in ‘description’ fields.\nTo do: Evaluate the interpretability of local metadata in the broader Data.gov context.\nTo do: Review the catalog of data sets available via our JSON endpoint and determine if all are appropriate to share via Data.gov. If any data set is not suitable to share through the catalog, methods to exclude such datasets would need to be identified and implemented."
  },
  {
    "objectID": "data_dot_gov.html#information-required-when-registering-to-have-local-data-added-to-data.gov",
    "href": "data_dot_gov.html#information-required-when-registering-to-have-local-data-added-to-data.gov",
    "title": "AGO-DCAT-Data.gov",
    "section": "Information required when registering to have local data added to Data.gov",
    "text": "Information required when registering to have local data added to Data.gov\nLocal governments and others are invited sign up to have local data federated to Data.gov.\nWhen doing so, the following information is requested:\n\nName of the governement entity\nName and email address of individual requesting to have data catalog included\nData Catalog Data.json URL\nData Catalog Terms of Use URL\nAdditionally, details about data included in the catalog from other sources such as the Federal Government, State Government, or a non-profit is requested."
  },
  {
    "objectID": "data_dot_gov.html#metadata-validation-errors-from-oct-07",
    "href": "data_dot_gov.html#metadata-validation-errors-from-oct-07",
    "title": "AGO-DCAT-Data.gov",
    "section": "Metadata validation errors from Oct 07",
    "text": "Metadata validation errors from Oct 07\n\nlibrary(jsonlite)\nlibrary(listviewer)\n\nBrowse json file\n\ndcat_errors <- fromJSON(\"https://dashboard.data.gov/validate?schema=non-federal-v1.1&output=json&datajson_url=https%3A%2F%2Fdata.detroitmi.gov%2F%2Fapi%2Ffeed%2Fdcat-us%2F1.1.json&qa=true\")\n\n\nlistviewer::jsonedit(dcat_errors, height = \"800px\", mode = \"view\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "exemplar/index.html#reviewing-data",
    "href": "exemplar/index.html#reviewing-data",
    "title": "Metadata exemplar",
    "section": "Reviewing data",
    "text": "Reviewing data"
  },
  {
    "objectID": "exemplar/index.html#html-preview",
    "href": "exemplar/index.html#html-preview",
    "title": "Metadata exemplar",
    "section": "HTML Preview",
    "text": "HTML Preview\nHTML display mockup"
  },
  {
    "objectID": "exemplar/index.html#metadata-on-ago",
    "href": "exemplar/index.html#metadata-on-ago",
    "title": "Metadata exemplar",
    "section": "Metadata on AGO",
    "text": "Metadata on AGO\nThrough the ArcGIS Online Open Data Portal:\n\nSome metadata will be displayed on a data set’s ‘about’ page\nFull metadata will be displayed from the ‘View All Metadata’ selection"
  },
  {
    "objectID": "exemplar/index.html#dcat-us-v-1.1-schema-from-ago",
    "href": "exemplar/index.html#dcat-us-v-1.1-schema-from-ago",
    "title": "Metadata exemplar",
    "section": "DCAT-US v 1.1 schema from AGO",
    "text": "DCAT-US v 1.1 schema from AGO"
  },
  {
    "objectID": "exemplar/index.html#data-dictionary-formats",
    "href": "exemplar/index.html#data-dictionary-formats",
    "title": "Metadata exemplar",
    "section": "Data dictionary formats",
    "text": "Data dictionary formats"
  },
  {
    "objectID": "federated_data_errors.html",
    "href": "federated_data_errors.html",
    "title": "federated_data_errors",
    "section": "",
    "text": "Code\nlibrary(jsonlite)\nlibrary(listviewer)\n\n\nBrowse json file\n\n\nCode\ndcat_errors <- fromJSON(\"https://dashboard.data.gov/validate?schema=non-federal-v1.1&output=json&datajson_url=https%3A%2F%2Fdata.detroitmi.gov%2F%2Fapi%2Ffeed%2Fdcat-us%2F1.1.json&qa=true\")\n\n\n\n\nCode\nlistviewer::jsonedit(dcat_errors, height = \"800px\", mode = \"view\")"
  },
  {
    "objectID": "data_dot_gov.html#adding-local-government-data-to-data.gov-requirements",
    "href": "data_dot_gov.html#adding-local-government-data-to-data.gov-requirements",
    "title": "AGO-DCAT-Data.gov",
    "section": "Adding local government data to Data.gov: Requirements",
    "text": "Adding local government data to Data.gov: Requirements\n\n\n\n\n\n\nDanger\n\n\n\nGithub issue #1168 is being used to track progress on steps required to have Detroit’s ODP metadata harvested by Data.gov.\n\n\n\n\n\n\nflowchart TB\n  subgraph Catalog_Record\n    direction LR\n    d1[[Dataset <br> record 1]]\n    d2[[Dataset <br> record 2]]\n    d3[[Dataset <br> record n]]\n  end  \n  A[(AGO <br> geodatabase)] -. exposes DCATA-US v1.1 <br> metadata .-> Catalog_Record -. harvested by <br> Data.gov .-> C[(Data.gov <br> catalog)]\n\n\n\n\n\n\n\n\nThe article “How to get your Open Data on Data.gov” provides instructions for having Open Data harvested by Data.gov and includes details specific to non-federal governments.\n\n\n\n\n\n\nTip\n\n\n\nGithub issue #1168 is being used to track progress on steps required to have Detroit’s ODP metadata harvested by Data.gov.\n\n\nIn brief, requirements for adding local government data that would need to be completed are:\n\nA data.json endpoint that can be harvested by the Data.gov catalog with metadata that meets minimum criteria required of non-federal government entities. DCAT-US schema version 1.1 metadata requirements are published on resources.data.gov. The jsonld schema URL for DCAT 1.1 is https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld.\n\nTo do: Develop a terms of use / data policy for data sets shared through the Detroit Open Data Portal. To be in compliance with data.gov requirements, this policy should be accessible via a stable URL.\nFor review: Identify a single point of contact to which/whom data.gov staff can refer questions about Detroit data sets. This point of contact should be able to triage questions about Detroit data.\nTo do: Ensure every data set meets the minimum metadata requirements. To help with this, metadata can be validated using a .json catalog endpoint or by file upload at https://labs.data.gov/dashboard/validate . Preliminary results from an initial validation of our catalog are being analyzed.\nTo do: Review metadata and text formatting of metadata entries as shared through the DCAT json endpoint available from AGO. Special attention should be paid to metadata added with html formatting in ‘description’ fields.\nTo do: Evaluate the interpretability of local metadata in the broader Data.gov context.\nTo do: Review the catalog of data sets available via our JSON endpoint and determine if all are appropriate to share via Data.gov. If any data set is not suitable to share through the catalog, methods to exclude such datasets would need to be identified and implemented."
  },
  {
    "objectID": "alternate-items.html",
    "href": "alternate-items.html",
    "title": "alternate-items",
    "section": "",
    "text": "Second diagram\n\n\n\n\nflowchart LR\n  A[(AGO <br> geodatabase)] -. exposes DCATA-US v1.1 <br> metadata .-> B[[1 Catalog record <br> containing <br> many Dataset records]] -. harvested by <br> Data.gov .-> C[(Data.gov <br> catalog)]"
  },
  {
    "objectID": "data_dot_gov.html#adding-local-government-data-to-data.gov",
    "href": "data_dot_gov.html#adding-local-government-data-to-data.gov",
    "title": "Preparing ODP data for discovery through Data.gov",
    "section": "Adding local government data to Data.gov",
    "text": "Adding local government data to Data.gov\nThe article “How to get your Open Data on Data.gov” provides instructions for having Open Data harvested by Data.gov and includes details specific to non-federal data publishers.\nAt a local level, a number of recommended policy, quality assurance, and related steps have been identified through review of our metadata and other local data resources. An overview of recommendations developed to date follow. Progress on the recommendations is being tracked on Github.\n\nSteps to ensure metadata meets local and Data.gov publishing criteria [DRAFT]\n\nDevelop a terms of use / data policy for data sets shared through the Detroit Open Data Portal. To be in compliance with data.gov requirements, this policy should be accessible via a stable URL.\nIdentify a single point of contact to which/whom data.gov staff can refer questions about Detroit data sets. This point of contact should be able to triage questions about Detroit data.\nEnsure every data set meets the minimum metadata requirements. To help with this, metadata can be validated using a .json catalog endpoint or by file upload at https://labs.data.gov/dashboard/validate. Results from an initial validation of our catalog were analyzed and issues to be remedied are available on GitHub. Moving forward, validation checks should be repeated periodically or continuously as developing metadata procedures are instituted.\nSteps to help ensure metadata associated with newly published data meets the Data.gov standard should be integrated into data publication workflows and instructions.\nIn some cases, element-level metadata of the type that would be included in a data dictionary has been directly entered in the data set description fields on AGO. As metadata processes and standards are formalized, it may be helpful to review metadata displays and available alternatives. In collaboration with data stewards and other stakeholders, benefits and limitations of retrospectively reformatting metadata could be reviewed.\nEvaluate the interpretability of local metadata in broader contexts such as Data.gov context.\nReview the catalog of data sets available via our JSON endpoint and determine if all are appropriate to share via Data.gov. If any data set is not suitable to share through the catalog, methods to exclude such data sets, and how this would impact data published through the ODP would need to be identified and taken into account.\n\n\n\n\n\n\n\nTip\n\n\n\nGithub issue #1168 and related sub-issues are being used to track progress on recommendations."
  },
  {
    "objectID": "data_dot_gov.html#data.gov-sign-up-and-registration-requirements",
    "href": "data_dot_gov.html#data.gov-sign-up-and-registration-requirements",
    "title": "Preparing ODP data for discovery through Data.gov",
    "section": "Data.gov sign-up and registration requirements",
    "text": "Data.gov sign-up and registration requirements\nLocal governments and others are invited to sign up to have local data federated to Data.gov. When doing so, the following information is requested:\n\nName of the government entity\nName and email address of individual requesting to have data catalog included\nData Catalog Data.json URL\nData Catalog Terms of Use URL\nAdditionally, details about data included in the catalog from other sources such as the Federal Government, State Government, or a non-profit is requested."
  },
  {
    "objectID": "exemplar/inspect_df_trial_fire_inspections.html#dimensions-and-variables",
    "href": "exemplar/inspect_df_trial_fire_inspections.html#dimensions-and-variables",
    "title": "Fire inspections data set overview",
    "section": "Dimensions and variables",
    "text": "Dimensions and variables\nThe imported data set includes 16 variables and 5636 annual inspection records. Nine variables originate in the ingested data, and seven (X, Y, InspWithinLastYear, address_id, lon, lat, ObjectId) from data enrichment and processing activities.\n\n\nCode\ninspections\n\n\n\n\n  \n\n\n\nWhen imported, variables in the data set were assigned data types based on constituent data. Though fundamentally a logical variable, ‘InspWithinLastYear’ was treated as a factor to retain display of the labels ‘Yes’ and ‘No’.\n\n\nCode\ninspect_types(inspections) %>% show_plot()\n\n\n\n\n\n\nNull value prevalence\n\n\nCode\ninspect_na(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\n# Remove 'ANNUAL ' from InspectionType_Full text strings for chart and plot\ntmp_inspections <- inspections\ntmp_inspections$InspectionType_Full <- str_sub(tmp_inspections$InspectionType_Full, 8, -1)\ntmp_inspections %>% count(InspectionType_Full, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(tmp_inspections, aes(x = fct_infreq(InspectionType_Full))) + \n  geom_bar() + labs(x=\"Annual Inspection Type\", y=\"Count\") + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetype, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(propusetypedescription))) + \n  geom_bar() + coord_flip()\n\n\n\n\n\n\n\nCode\ninspections %>% count(propusetypedescription, sort=TRUE)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% count(InspWithinLastYear, sort=TRUE)\n\n\n\n\n  \n\n\n\nCode\nggplot(inspections, aes(x = fct_infreq(InspWithinLastYear))) + \n  geom_bar()\n\n\n\n\n\n\n\nCode\n# Need to bin by month or year - this is unbinned\n# inspections %>% select(LatestInspDate)\n# ggplot(inspections, aes(x=LatestInspDate)) + stat_count(geom='point')\n\n\n\n\nCode\ninspect_imb(inspections) %>% show_plot()\n\n\n\n\n\n\n\nCode\ninspect_cat(inspections)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% distinct(propusetype, propusetypedescription)  #%>% select(PropUseType, PropUseTypeDescription)\n\n\n\n\n  \n\n\n\n\n\nCode\ninspections %>% arrange(propusetype) %>% distinct(propusetypedescription) %>% arrange(.by_group = TRUE)"
  }
]