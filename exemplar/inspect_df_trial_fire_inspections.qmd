---
title: "Fire inspections data set overview"
format:
  html:
    code-fold: true
    df-print: paged
---



```{r} 
#| label: load-libraries
#| output: false
#| warning: false
library(readr)
library(inspectdf)
library(stringr)
library(forcats)
library(dplyr)
library(ggplot2)
library(lubridate)
library(dplyr)
library(gridExtra)   
# library(ggsankey)
# library(scales)
```


Fire Inspections data was downloaded in csv format from the ODP on Oct 10, 2020 to obtain a snapshot of published data after completion of the entire data processing pipeline.



```{r}
#| label: load-fire-inspect-data
inspections <- read_csv("data/Fire_Inspections_20221010.csv",
    col_types = cols(X = col_double(), 
                     Y = col_double(), 
                     IO_ID = col_character(), 
                     Address = col_character(), 
                     OccupantName = col_character(), 
                     StructureName = col_character(),
                     InspectionType_Full = col_factor(),
                     LatestInspDate = col_datetime(format = "%Y/%m/%d %H:%M:%S+00"),
                     InspWithinLastYear = col_factor(),
                     address_id = col_character(), 
                     lon = col_double(), 
                     lat = col_double(), 
                     ObjectId = col_character(), 
                     propusetype = col_factor(), 
                     propusetypedescription = col_factor(),
                     zip = col_factor()))

```



## Dimensions and variables

The imported data set includes `r ncol(inspections)` variables and `r nrow(inspections)` annual inspection records. Nine variables originate in the ingested data, and seven (X, Y, InspWithinLastYear, address_id, lon, lat, ObjectId) from data enrichment and processing activities. The X and Y variables are not visible in the online AGO data table display but are available data distribution downloads

```{r}
inspections
```

When imported, variables in the data set were assigned data types based on constituent data. Though fundamentally a logical variable, 'InspWithinLastYear' was treated as a factor to retain display of the labels 'Yes' and 'No'.

```{r}
#| label: data-types
inspect_types(inspections) %>% show_plot()
```



### Null value prevalence

Across the fire inspections data set, 6 columns include 'NA' or null values. One column, 'StructureName' is used by DFD on an ad hoc basis for directional purposes in inspection workflows and is only indicated in inspection records when helpful. Null values in the remaining five fields originate from geocoding. These null values represent addresses that were not identified when the data set was geocoded.

```{r}
#| Label: null-overview
inspect_na(inspections) %>% show_plot()
```



```{r}
### Inspected within last year : removed this chart
# inspections %>% count(InspWithinLastYear, sort=TRUE)
# ggplot(inspections, aes(x = fct_infreq(InspWithinLastYear))) + 
#  geom_bar()
```


### Inspections by time periods

When generating charts to indicate when inspections occurred by time of day and day of week, the datetime field was interpreted to be the local system time (Eastern Time). Inspection dates and times are recorded in the format `%Y/%m/%d %H:%M:%S+00`, for example `2022/09/26 08:47:08+00`, where the `+00` at the end of an entry should indicate the time offset from UTC. 



```{r}
#| label: prepare-time-related-fields

# example datetime field: 	
# 2022/09/26 08:47:08+00


# transform to date time field then make day of week field + time of day field
# timezone information, stored as '+00' in AGO is snipped off by taking substring of datetime field, set timezone to time on my local system
inspections <- inspections %>%
  mutate(time_of_day = hms(str_sub(LatestInspDate,12,19)), 
         LatestInspDate = as_datetime(str_sub(LatestInspDate,1,19), tz = Sys.timezone()),
         day_of_week = wday(LatestInspDate,label=TRUE,abbr=TRUE))

# create decimal time using hour plus fractional hours calculated from minute, second values
inspections <- inspections %>%
  mutate(time_dec = hour(time_of_day) + 
  minute(time_of_day)/60 + 
  second(time_of_day)/360)

```




```{r}
#| label: inspection-days
#| warning: false
# bar plot: count of inspections per day of the week
day_recent <- inspections %>%
  group_by(day_of_week, InspWithinLastYear) %>%
  summarize(N = n())

#glimpse(day_recent)

# day_recent

ggplot(data = day_recent, aes(x=day_of_week, y=N, fill = InspWithinLastYear)) + geom_col(position = 'dodge2') + 
  labs(x="Day of Week", y = "Number of Inspections", fill = "Inspected in last year")
```

#### Inspections by day and time

It could be helpful to examine how time zone and daylight savings time are recorded in our data. The charts depicting inspections by time of day and day of week are a first step towards supporting such a review. 

```{r}
#| label: Inspections-days-times 

# density plots: time of day by day of week: all inspections
p1 <- ggplot(data = inspections, 
            mapping = aes(x = time_dec)) + 
  scale_x_continuous(breaks = c(0,4,8,12,16,20,24)) +
  scale_y_continuous(breaks = c(0.0, 0.10)) +
  geom_density(fill='#9FD5B3', color = '#279989') +  # spirit green: #279989 city green: #004445
  ggtitle("All inspections") +
  labs(x="Time of Day (24 hour clock)", y = "Proportion") + 
  theme(axis.ticks.y = element_blank()) +
  facet_wrap(~ day_of_week, ncol=1)




# density plots: time of day by day of week: past year inspections
inspections_recent <- inspections  %>%
  filter(InspWithinLastYear == "Yes") 

p2 <- ggplot(data = inspections_recent, 
            mapping = aes(x = time_dec)) + 
  scale_x_continuous(breaks = c(0,4,8,12,16,20,24)) +
  scale_y_continuous(breaks = c(0.0, 0.10)) +
  geom_density(fill='#9FD5B3', color = '#279989') +  # spirit green: #279989 city green: #004445
  ggtitle("Inspections in last year") +
  labs(x="Time of Day (24 hour clock)", y = "Proportion") + 
  theme(axis.ticks.y = element_blank()) +
  facet_wrap(~ day_of_week, ncol=1)

grid.arrange(p1, p2, ncol = 2)          # Apply grid.arrange function

```


### Annual inspection type


```{r}
# Remove 'ANNUAL ' from InspectionType_Full text strings for chart and plot
tmp_inspections <- inspections
tmp_inspections$InspectionType_Full <- str_sub(tmp_inspections$InspectionType_Full, 8, -1)
tmp_inspections %>% count(InspectionType_Full, sort=TRUE)

```


```{r}
ggplot(tmp_inspections, aes(x = fct_infreq(InspectionType_Full))) + 
  geom_bar() + labs(x="Annual Inspection Type", y="Count") + coord_flip()
```

### Property use type

```{r}
inspections %>% count(propusetype, sort=TRUE)


```


```{r}
#| echo: false
#| evaluate: false
#| output: false
# rework graph. For example, do not include items that occur only once - or under similar low threshold - in chart. Instead, list those items and the number of times they occur separately
ggplot(inspections, aes(x = fct_infreq(propusetypedescription))) + 
  geom_bar() + coord_flip()
```
```{r}
#| echo: false
#| evaluate: false
#| output: false
# to do: include both propusetype code and description in one chart

inspections %>% distinct(propusetype, propusetypedescription)  #%>% select(PropUseType, PropUseTypeDescription)
```


```{r}
inspections %>% count(propusetypedescription, sort=TRUE)
```



```{r}
# Need to bin by month or year - this is unbinned
# inspections %>% select(LatestInspDate)
# ggplot(inspections, aes(x=LatestInspDate)) + stat_count(geom='point')
```


### Most common values in categorical variables (columns)

```{r}
inspect_imb(inspections) %>% show_plot()
```

### Number of unique values and prevalence of most common values by column

```{r}
inspect_cat(inspections)
```





```{r}
# inspections %>% arrange(propusetype) %>% distinct(propusetypedescription) %>% arrange(.by_group = TRUE)
```

